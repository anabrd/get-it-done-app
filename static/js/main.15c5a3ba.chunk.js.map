{"version":3,"sources":["components/Login.js","components/Register.js","pages/Auth.js","components/Task.js","components/TaskWrapper.js","components/Form.js","components/Message.js","pages/Tasks.js","App.js","reportWebVitals.js","index.js"],"names":["Login","setRegisterLoginToggle","useState","successMsg","setSuccessMsg","history","useHistory","formData","fillForm","e","target","id","value","console","log","Paper","elevation","className","onSubmit","preventDefault","data","email","pass","url","options","method","headers","body","JSON","stringify","fetch","then","output","json","result","status","message","localStorage","setItem","setTimeout","push","FormControl","TextField","label","aria-describedby","autoFocus","required","onChange","Button","type","variant","color","style","textDecoration","display","cursor","onClick","Register","passError","setPassError","setRegistered","loginError","setLoginError","passErrMsg","setPassErrMsg","loginErrMsg","setLoginErrMsg","passConf","submitHandler","error","helperText","Auth","registerLoginToggle","useStyles","makeStyles","root","boxShadow","padding","margin","width","checkBox","fill","Task","task","deleteTask","updateFormToggle","setMessage","displayMessage","classes","Grid","item","Card","CardContent","FormControlLabel","control","Checkbox","isFinished","updatedTask","getItem","catch","err","editTaskStatus","checked","title","labelPlacement","Box","EditOutlined","DeleteOutline","_id","TaskWrapper","tasks","taskList","setTaskList","useEffect","Tasks","draggableComp","map","taskItem","index","draggableId","provided","ref","innerRef","draggableProps","dragHandleProps","container","justify","spacing","onDragEnd","destination","items","Array","from","splice","source","reorderedItem","droppableId","droppableProps","placeholder","Form","props","activeContent","currentTask","text","submitBtn","cancelBtn","Dialog","open","setFormToggle","fullWidth","DialogTitle","DialogContent","fullwidth","formAction","setNewTask","DialogActions","addTask","editTaskTitle","Message","showMessage","content","Fade","in","Typography","formToggle","setTasks","newTask","setCurrentTask","setFormAction","loader","setLoader","setShowMessage","action","prevState","Fab","aria-label","marginBottom","CircularProgress","newTasks","filter","updatedArr","findIndex","App","path","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","basename","process","StrictMode","document","getElementById"],"mappings":"+NAIe,SAASA,EAAT,GAA0C,IAA1BC,EAAyB,EAAzBA,uBAE3B,EAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAEIC,EAAUC,cACVC,EAAW,GACTC,EAAW,SAACC,GACdF,EAASE,EAAEC,OAAOC,IAAMF,EAAEC,OAAOE,MACjCC,QAAQC,IAAIP,IAqChB,OACI,eAACQ,EAAA,EAAD,CAAOC,UAAW,EAAIC,UAAU,mBAAhC,UACQ,uBAAMC,SApCI,SAACT,GACnBA,EAAEU,iBACFN,QAAQC,IAAIP,GACZ,IAAIa,EAAO,CACHC,MAAOd,EAASc,MAChBC,KAAMf,EAASe,MAEnBC,EAAM,yDACNC,EAAU,CACVC,OAAQ,OACRC,QAAS,CACL,eAAgB,oBAEpBC,KAAMC,KAAKC,UAAUT,IAGzBP,QAAQC,IAAIM,EAAMG,EAAKC,GAEvBM,MAAMP,EAAKC,GAASO,MAAK,SAAAC,GAAM,OAAIA,EAAOC,OAAOF,MAAK,SAAAG,GAEzB,UAAjBA,EAAOC,OACP/B,EAAc8B,EAAOE,UAErBhC,EAAc8B,EAAOE,SACrBC,aAAaC,QAAQ,QAASJ,EAAOd,MACrCmB,YAAW,WACPlC,EAAQmC,KAAK,YACd,aASyBvB,UAAU,WAA1C,UACI,cAACwB,EAAA,EAAD,UACI,cAACC,EAAA,EAAD,CACA/B,GAAG,QACHgC,MAAM,QACNC,mBAAiB,iBACjBC,UAAY,OACZC,SAAW,OACXC,SAAYvC,MAEhB,cAACiC,EAAA,EAAD,UACI,cAACC,EAAA,EAAD,CACA/B,GAAG,OACHgC,MAAM,WACNG,SAAW,OACXC,SAAYvC,MAEhB,cAACwC,EAAA,EAAD,CACIC,KAAK,SACLC,QAAQ,YACRC,MAAM,YAHV,sBAMJ,0CACQ,sBACAC,MAAS,CAACC,eAAgB,YAAaC,QAAS,QAASC,OAAQ,WACjEC,QAAS,kBAAMvD,GAAuB,IAFtC,yBAKR,4BAAIE,OC0BLsD,MAvGf,YAA6C,IAA1BxD,EAAyB,EAAzBA,uBAEf,EAAkCC,oBAAS,GAA3C,mBAAOwD,EAAP,KAAkBC,EAAlB,KACA,EAAoCzD,oBAAS,GAA7C,mBAAmB0D,GAAnB,WACA,EAAoC1D,oBAAS,GAA7C,mBAAO2D,EAAP,KAAmBC,EAAnB,KACA,EAAoC5D,mBAAS,IAA7C,mBAAO6D,EAAP,KAAmBC,EAAnB,KACA,EAAsC9D,mBAAS,IAA/C,mBAAO+D,EAAP,KAAoBC,EAApB,KACA,EAAoChE,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KACA,EAAgCF,mBAAS,CAACmB,MAAM,GAAIC,KAAK,GAAI6C,SAAS,KAAtE,mBAAO5D,EAAP,KAEMC,GAFN,KAEiB,SAACC,GACdF,EAASE,EAAEC,OAAOC,IAAMF,EAAEC,OAAOE,MACjC+C,GAAa,GACbG,GAAc,GACdE,EAAc,IACdnD,QAAQC,IAAIP,KAGV6D,EAAgB,SAAC3D,GAEnB,GADAA,EAAEU,iBACEZ,EAASe,OAASf,EAAS4D,SAC3BR,GAAa,GACbK,EAAc,6CACX,CACH,IAAI5C,EAAO,CACHC,MAAOd,EAASc,MAChBC,KAAMf,EAASe,MAGnBE,EAAU,CACVC,OAAQ,OACRC,QAAS,CACL,eAAgB,oBAEpBC,KAAMC,KAAKC,UAAUT,IAEzBP,QAAQC,IAAIU,GAEZM,MAVU,4DAUCN,GAASO,MAAK,SAAAC,GAAM,OAAIA,EAAOC,OAAOF,MAAK,SAAAG,GAEzB,UAAjBA,EAAOC,QACP+B,EAAehC,EAAOE,SACtB0B,GAAc,KAEdF,GAAc,GACdxD,EAAc8B,EAAOE,QAAU,uCAC/BG,YAAW,WACPtC,GAAuB,KACxB,cAMvB,OAEI,eAACc,EAAA,EAAD,CAAOC,UAAW,EAAIC,UAAU,mBAAhC,UACQ,uBAAMC,SAAUkD,EAAgBnD,UAAU,WAA1C,UACI,cAACwB,EAAA,EAAD,UACI,cAACC,EAAA,EAAD,CACA/B,GAAG,QACHgC,MAAM,QACNC,mBAAiB,iBACjBC,UAAY,OACZC,SAAW,OACXuB,MAAOR,EACPS,WAAYL,EACZlB,SAAYvC,MAEhB,cAACiC,EAAA,EAAD,UACI,cAACC,EAAA,EAAD,CACA/B,GAAG,OACHgC,MAAM,WACNG,SAAW,OACXC,SAAYvC,MAEhB,cAACiC,EAAA,EAAD,UACI,cAACC,EAAA,EAAD,CACA/B,GAAG,WACHgC,MAAM,mBACNG,SAAW,OACXuB,MAAOX,EACPY,WAAYP,EACZhB,SAAYvC,MAEhB,cAACwC,EAAA,EAAD,CACIC,KAAK,SACLC,QAAQ,YACRC,MAAM,YACNK,QAAS,kBAAMY,GAJnB,yBAOJ,iDACQ,sBACAhB,MAAS,CAACC,eAAgB,YAAaC,QAAS,QAASC,OAAQ,WACjEC,QAAS,kBAAMvD,GAAuB,IAFtC,uBAKR,4BAAIE,QCjFLoE,MAhBf,WACI,MAAsDrE,oBAAS,GAA/D,mBAAOsE,EAAP,KAA4BvE,EAA5B,KAEA,OACI,sBAAKgB,UAAU,OAAOmC,MAAO,CAACE,QAAS,SAAvC,UACI,6CACCkB,EAAsB,cAACxE,EAAD,CACvBC,uBAA0BA,IAE1B,cAAC,EAAD,CACAA,uBAA0BA,Q,yGCVhCwE,EAAYC,YAAW,CACrBC,KAAM,CACFC,UAAW,wCACXzB,MAAO,UACP0B,QAAS,KACTC,OAAQ,UACRC,MAAO,SAEXC,SAAU,CACNC,KAAM,WAEVtC,MAAO,CACHoC,MAAO,WAgEJG,MA5Df,YAAiF,IAAlEC,EAAiE,EAAjEA,KAAMC,EAA2D,EAA3DA,WAAYC,EAA+C,EAA/CA,iBAAkBC,EAA6B,EAA7BA,WAAYC,EAAiB,EAAjBA,eAErDC,EAAUf,IA+BhB,OACI,cAACgB,EAAA,EAAD,CAAMC,MAAI,EAAV,SACI,cAACC,EAAA,EAAD,CAAM1E,UAAauE,EAAQb,KAA3B,SACI,eAACiB,EAAA,EAAD,WACI,cAACC,EAAA,EAAD,CACIC,QACI,cAACC,EAAA,EAAD,CACI9E,UAAauE,EAAQR,SACrBjC,SAAU,kBArCf,SAACZ,GACpBgD,EAAKa,YAAc7D,EACnB,IAAI8D,EAAW,eAAOd,GAEhB3D,EAAU,CACZC,OAAQ,OACRC,QAAS,CACL,eAAgB,mBAChB,eAAgBW,aAAa6D,QAAQ,UAEzCvE,KAAMC,KAAKC,UAAUoE,IAEzBnE,MATY,2DASDN,GACVO,MAAK,SAAAG,GAAM,OAAIA,EAAOD,OACtBF,MAAK,SAAAC,GACmB,WAAjBA,EAAOG,QACH8D,EAAYD,WACZV,EAAWtD,EAAOI,SAElBkD,EAAW,8BAEfC,KAEA1E,QAAQC,IAAIkB,EAAOI,eAG1B+D,OAAM,SAAAC,GAAG,OAAIvF,QAAQC,IAAIsF,MAWcC,CAAelB,EAAKa,aACpCM,UAAWnB,EAAKa,aAGxBrD,MAAOwC,EAAKoB,MACZC,eAAe,OACfpD,MAAO+B,EAAKa,WAAa,CAAC3C,eAAgB,eAAgBF,MAAM,YAAc,KAC9EqC,QAASA,EAAQ7C,QAErB,eAAC8D,EAAA,EAAD,YACMtB,EAAKa,YAAc,cAACU,EAAA,EAAD,CAAelD,QAAS,kBAAM6B,EAAiB,OAAQF,IAAvD,kBACrB,cAACwB,EAAA,EAAD,CAAenD,QAAS,kBAAM4B,EAAWD,EAAKyB,MAA9C,+BCdTC,MApDf,YAAyF,IAAnEC,EAAkE,EAAlEA,MAAOzB,EAA2D,EAA3DA,iBAAkBD,EAAyC,EAAzCA,WAAYE,EAA6B,EAA7BA,WAAYC,EAAiB,EAAjBA,eAEnE,EAAgCrF,mBAAS4G,GAAzC,mBAAOC,EAAP,KAAiBC,EAAjB,KAEAC,qBAAU,WACND,EAAYF,KACb,CAACI,IAUJ,IAAIC,EAAgBJ,EAASK,KAAI,SAACC,EAAUC,GAC5B,OACI,cAAC,IAAD,CAA8BC,YAAaF,EAAST,IAAKU,MAAOA,EAAhE,SACK,SAACE,GAAD,OACG,yDAAwBC,IAAKD,EAASE,UAAcF,EAASG,gBAAoBH,EAASI,iBAA1F,aACI,cAAC,EAAD,CACAzC,KAAMkC,EACNjC,WAAcA,EACdC,iBAAkBA,EAClBC,WAAYA,EACZC,eAAgBA,MANV8B,EAAST,OAFXS,EAAST,QAgB7C,OACI,cAACnB,EAAA,EAAD,CAAMoC,WAAS,EAACC,QAAQ,SACxBC,QAAS,EACT3E,MAAS,CAACyB,QAAS,MAFnB,SAGI,cAAC,IAAD,CAAiBmD,UA9BzB,SAAmB9F,GACf,GAAKA,EAAO+F,YAAZ,CACA,IAAMC,EAAQC,MAAMC,KAAKrB,GACzB,EAAwBmB,EAAMG,OAAOnG,EAAOoG,OAAOhB,MAAO,GAAnDiB,EAAP,oBACAL,EAAMG,OAAOnG,EAAO+F,YAAYX,MAAO,EAAGiB,GAC1CvB,EAAYkB,KAyBR,SACI,cAAC,IAAD,CAAWM,YAAY,QAAvB,SACK,SAAChB,GAAD,OACD,gDAASA,EAASiB,gBAAlB,IAAkChB,IAAKD,EAASE,SAAhD,UACKP,EACAK,EAASkB,wB,oCCoBnBC,MAjEf,SAAcC,GAEV,IAAIC,EAgCJ,OA7BIA,EADAD,EAAME,YACU,CAChBvC,MAAO,YACPwC,KAAM,mBACNpG,MAAOiG,EAAME,YAAYvC,MACzBmC,YAAaE,EAAME,YAAYvC,MAC/ByC,UAAW,eACXC,UAAW,UAGK,CACZ1C,MAAO,eACPwC,KAAM,oBACNpG,MAAO,aACP+F,YAAa,oBACbM,UAAW,WACXC,UAAW,UAef,eAACC,EAAA,EAAD,CACAC,KAAMP,EAAMQ,cACZC,UAAU,OAFV,UAGI,cAACC,EAAA,EAAD,UAAcT,EAActC,QAC5B,cAACgD,EAAA,EAAD,UACI,cAAC7G,EAAA,EAAD,CACIG,WAAa,EACb2G,WAAa,EACb7I,GAAG,iBACHgC,MAAQkG,EAAcE,KACtBL,YAAcG,EAAclG,MAC5BI,SAnBhB,SAAkBtC,GACU,OAApBmI,EAAMa,WACNb,EAAMc,WAAW,CAACnD,MAAO9F,EAAEC,OAAOE,MAAOoF,YAAY,IAErD4C,EAAMc,WAAN,2BAAqBd,EAAME,aAA3B,IAAwCvC,MAAO9F,EAAEC,OAAOE,cAiBxD,eAAC+I,EAAA,EAAD,WACI,cAAC3G,EAAA,EAAD,CACIC,KAAK,SACLC,QAAQ,YACRC,MAAM,UACNK,QAA6B,OAApBoF,EAAMa,WAAsBb,EAAMgB,QAAUhB,EAAMiB,cAJ/D,SAKMhB,EAAcG,YACpB,cAAChG,EAAA,EAAD,CACIE,QAAQ,WACRC,MAAM,UACNK,QAAS,kBAAMoF,EAAMQ,eAAc,IAHvC,SAIMP,EAAcI,mB,iBC/CrBa,MAbf,YAA0C,IAAxB1H,EAAuB,EAAvBA,QAAS2H,EAAc,EAAdA,YAEnBC,EAAU5H,EAEd,OACI,cAAC6H,EAAA,EAAD,CAAMC,GAAIH,EAAa9I,UAAU,UAAjC,SACI,cAACkJ,EAAA,EAAD,UACKH,O,iDC+LF9C,MA7Lf,WAEI,MAAoChH,oBAAS,GAA7C,mBAAOkK,EAAP,KAAmBhB,EAAnB,KACA,EAA0BlJ,mBAAS,IAAnC,mBAAO4G,EAAP,KAAcuD,EAAd,KACA,EAA8BnK,mBAAS,IAAvC,mBAAOoK,EAAP,KAAgBZ,EAAhB,KACA,EAAsCxJ,qBAAtC,mBAAO4I,EAAP,KAAoByB,EAApB,KACA,EAAoCrK,mBAAS,MAA7C,mBAAOuJ,EAAP,KAAmBe,EAAnB,KACA,EAA4BtK,oBAAS,GAArC,mBAAOuK,EAAP,KAAeC,EAAf,KACA,EAA8BxK,mBAAS,IAAvC,mBAAOkC,EAAP,KAAgBkD,EAAhB,KACA,EAAsCpF,oBAAS,GAA/C,mBAAO6J,EAAP,KAAoBY,EAApB,KAEItK,EAAUC,cAGR+E,EAAmB,SAACuF,EAAQzF,GAC9BqF,EAAcI,GACdL,EAAepF,GACfiE,GAAc,SAAAyB,GAAS,OAAKA,MAIhC5D,qBAAU,WACN,IACMzF,EAAU,CACZE,QAAS,CACL,eAAgBW,aAAa6D,QAAQ,WAI7CpE,MAPY,wDAODN,GAASO,MAAK,SAAAG,GAAM,OAAIA,EAAOD,OACzCF,MAAK,SAAAC,GACmB,WAAjBA,EAAOG,QACPkI,EAASrI,EAAOZ,MAChBsJ,GAAU,IACc,UAAjB1I,EAAOG,SACduI,GAAU,GACVrK,EAAQmC,KAAK,gBAGpB2D,OAAM,SAAAC,GACHvF,QAAQC,IAAIsF,GACZsE,GAAU,GACVpF,EAAW,oEAEhB,IAGH,IAqFMC,EAAiB,WACnBoF,GAAe,GACfpI,YAAW,WACPoI,GAAe,KAChB,MAGP,OACA,qCACI,eAAClE,EAAA,EAAD,CAAKxF,UAAU,OAAOqC,QAAQ,OAA9B,UACI,sBAAKrC,UAAU,eAAf,UACI,6CACA,sDACA,mBAAGA,UAAU,MAAb,sEACA,cAAC6J,EAAA,EAAD,CACI3H,MAAM,UACN4H,aAAW,MACX3H,MAAS,CAAC4H,aAAc,MACxBxH,QAAS,kBAAM6B,EAAiB,QAJpC,SAMI,cAAC,IAAD,MAEJ,cAAC,EAAD,CACIjD,QAASA,EACT2H,YAAaA,OAIpBU,EAAS,cAACQ,EAAA,EAAD,CAAkB9H,MAAM,cAClC,qBAAKlC,UAAU,eAAf,SACI,cAAC,EAAD,CACIA,UAAY,cACZ6F,MAASA,EACT1B,WA3DG,SAACzE,GACpBE,QAAQC,IAAIH,GACZ,IAAMY,EAAM,qDAAuDZ,EAC7Da,EAAU,CACZC,OAAQ,SACRC,QAAS,CACL,eAAgBW,aAAa6D,QAAQ,WAG7CpE,MAAMP,EAAKC,GACVO,MAAK,SAAAG,GAAM,OAAIA,EAAOD,OACtBF,MAAK,SAAAC,GAEE,IAAIkJ,EADc,YAAlBlJ,EAAOG,QAEP+I,EAAWpE,EAAMqE,QAAO,SAAAhG,GAAI,OAAIA,EAAKyB,MAAQ5E,EAAOZ,QACpDiJ,EAASa,GACT5F,EAAWtD,EAAOI,SAClBmD,MAEAD,EAAWtD,EAAOI,SAClBmD,WAEJY,OAAM,SAAAC,GAAG,OAAIvF,QAAQC,IAAIsF,OAsCbf,iBAAoBA,EACpBC,WAAcA,EACdC,eAAkBA,SAI7B6E,GACG,cAAC,EAAD,CACIhB,cAAeA,EACf/D,iBAAoBA,EACpBoE,WAAYA,EACZX,YAAeA,EACfc,QAnII,WACZR,GAAc,GACd,IACM5H,EAAU,CACZC,OAAQ,OACRC,QAAS,CACT,eAAgB,mBAChB,eAAgBW,aAAa6D,QAAQ,UAErCvE,KAAMC,KAAKC,UAAUyI,IAE7BxI,MATgB,wDASLN,GACVO,MAAK,SAAAG,GAAM,OAAIA,EAAOD,OACtBF,MAAK,SAAAC,GACe,WAAjBA,EAAOG,QACPkI,EAAS,GAAD,mBAAKvD,GAAL,CAAW9E,EAAOZ,QAC1BsI,EAAW,IACXpE,EAAWtD,EAAOI,SAClBmD,MAEAD,EAAWtD,EAAOI,SAClBmD,WAGDY,OAAM,SAAAC,GAAG,OAAId,EAAWc,OA4GfyD,cAxGU,WAClBT,GAAc,GACd,IACM5H,EAAU,CACZC,OAAQ,OACRC,QAAS,CACT,eAAgB,mBAChB,eAAgBW,aAAa6D,QAAQ,UAErCvE,KAAMC,KAAKC,UAAUyI,IAE7BxI,MATgB,0DASLN,GACVO,MAAK,SAAAG,GAAM,OAAIA,EAAOD,OACtBF,MAAK,SAAAC,GACF,GAAsB,YAAlBA,EAAOG,OAAsB,CAC7B,IAAIiJ,EAAa,IACjBA,EAAU,YAAOtE,IACHA,EAAMuE,WAAU,SAAAlG,GAAI,OAAIA,EAAKyB,KAAO5E,EAAOZ,KAAKwF,QAC1C5E,EAAOZ,KAC3BiJ,EAAS,YAAIe,IACb9F,EAAWtD,EAAOI,SAClBmD,SAEAD,EAAWtD,EAAOI,SAClBmD,UAGPY,OAAM,SAAAC,GAAG,OAAIvF,QAAQC,IAAIsF,OA8EdkE,QAAWA,EACXxD,MAASA,EACT4C,WAAcA,EACdW,SAAYA,QCrKbiB,MAhBf,WACI,OACE,eAAC,IAAD,WACE,cAAC,IAAD,CAAOC,KAAK,SAAZ,SACE,cAAC,EAAD,MAEF,cAAC,IAAD,CAAOA,KAAK,QAAZ,SACE,cAAC,EAAD,MAEF,cAAC,IAAD,CAAOA,KAAK,IAAZ,SACE,cAAC,EAAD,UCZKC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqB3J,MAAK,YAAkD,IAA/C4J,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,O,QCAdO,IAASC,OACP,cAAC,IAAD,CAAeC,SAAUC,mBAAzB,SACE,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,QAGJC,SAASC,eAAe,SAE1Bd,K","file":"static/js/main.15c5a3ba.chunk.js","sourcesContent":["import { useHistory } from 'react-router-dom'\nimport { useState } from 'react'\nimport { Button, FormControl, Paper, TextField } from '@material-ui/core'\n\nexport default function Login({setRegisterLoginToggle}) {\n\n    const [successMsg, setSuccessMsg] = useState(\"\");\n\n    let history = useHistory();\n    let formData = {};\n    const fillForm = (e) => {\n        formData[e.target.id] = e.target.value;\n        console.log(formData);\n    }\n\n    const submitHandler = (e) => {\n        e.preventDefault();\n        console.log(formData)\n        let data = {\n                email: formData.email,\n                pass: formData.pass\n            }\n        let url = 'https://getitdone-backend-app.herokuapp.com/auth/login'\n        let options = {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify(data)\n        }\n\n        console.log(data, url, options)\n\n        fetch(url, options).then(output => output.json().then(result => \n            {\n                if (result.status == \"failed\") {\n                    setSuccessMsg(result.message)\n                } else {\n                    setSuccessMsg(result.message);\n                    localStorage.setItem(\"token\", result.data)\n                    setTimeout(() => {\n                        history.push(\"/tasks\");\n                    }, 3000);\n                }\n            }\n            ));\n        }\n\n\n    return (\n        <Paper elevation={2}  className=\"authForm-wrapper\">\n                <form onSubmit={submitHandler}  className=\"authForm\">\n                    <FormControl>\n                        <TextField \n                        id=\"email\"\n                        label=\"Email\"\n                        aria-describedby=\"my-helper-text\" \n                        autoFocus = \"true\"\n                        required = \"true\"\n                        onChange = {fillForm}/>\n                    </FormControl>\n                    <FormControl>\n                        <TextField \n                        id=\"pass\" \n                        label=\"Password\"\n                        required = \"true\"\n                        onChange = {fillForm}/>\n                    </FormControl>\n                    <Button \n                        type=\"submit\" \n                        variant=\"contained\" \n                        color=\"secondary\"\n                        >Login</Button>\n                </form>\n                <p>New here?\n                        <span\n                        style = {{textDecoration: \"underline\", display: \"block\", cursor: \"pointer\"}}\n                        onClick={() => setRegisterLoginToggle(false)}\n                        >Register</span>\n                </p>\n                <p>{successMsg}</p>\n            </Paper>\n    )\n}\n","import { useState, useEffect } from 'react'\nimport { Button, FormControl, Input, InputLabel, Paper , TextField} from '@material-ui/core'\n\nfunction Register({setRegisterLoginToggle}) {\n\n    const [passError, setPassError] = useState(false);\n    const [registered, setRegistered] = useState(false);\n    const [loginError, setLoginError] = useState(false);\n    const [passErrMsg, setPassErrMsg] = useState(\"\");\n    const [loginErrMsg, setLoginErrMsg] = useState(\"\");\n    const [successMsg, setSuccessMsg] = useState(\"\");\n    const [formData, setFormData] = useState({email:\"\", pass:\"\", passConf:\"\"});\n\n    const fillForm = (e) => {\n        formData[e.target.id] = e.target.value;\n        setPassError(false);\n        setLoginError(false);\n        setPassErrMsg(\"\");\n        console.log(formData);\n    }\n\n    const submitHandler = (e) => {\n        e.preventDefault();\n        if (formData.pass !== formData.passConf) {\n            setPassError(true);\n            setPassErrMsg(\"Please make sure the passwords match.\");\n        } else {\n            let data = {\n                    email: formData.email,\n                    pass: formData.pass\n                }\n            let url = 'https://getitdone-backend-app.herokuapp.com/auth/register'\n            let options = {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify(data)\n            }\n            console.log(options)\n\n            fetch(url, options).then(output => output.json().then(result => \n                {\n                    if (result.status == \"failed\") {\n                        setLoginErrMsg(result.message);\n                        setLoginError(true)\n                    } else {\n                        setRegistered(true);\n                        setSuccessMsg(result.message + \"✅ Redirecting to login page...\");\n                        setTimeout(() => {\n                            setRegisterLoginToggle(true);\n                        }, 3000);\n                    }\n                }));\n        }\n    }\n\n    return (\n        \n        <Paper elevation={2}  className=\"authForm-wrapper\">\n                <form onSubmit={submitHandler}  className=\"authForm\">\n                    <FormControl>\n                        <TextField \n                        id=\"email\"\n                        label=\"Email\"\n                        aria-describedby=\"my-helper-text\" \n                        autoFocus = \"true\"\n                        required = \"true\"\n                        error={loginError}\n                        helperText={loginErrMsg}\n                        onChange = {fillForm}/>\n                    </FormControl>\n                    <FormControl>\n                        <TextField \n                        id=\"pass\" \n                        label=\"Password\"\n                        required = \"true\"\n                        onChange = {fillForm}/>\n                    </FormControl>\n                    <FormControl>\n                        <TextField \n                        id=\"passConf\" \n                        label=\"Confirm Password\"\n                        required = \"true\"\n                        error={passError}\n                        helperText={passErrMsg}\n                        onChange = {fillForm}/>\n                    </FormControl>\n                    <Button \n                        type=\"submit\" \n                        variant=\"contained\" \n                        color=\"secondary\"\n                        onClick={() => submitHandler}\n                        >Register</Button>\n                </form>\n                <p>Have an account?\n                        <span\n                        style = {{textDecoration: \"underline\", display: \"block\", cursor: \"pointer\"}}\n                        onClick={() => setRegisterLoginToggle(true)}\n                        >Log In</span>\n                </p>\n                <p>{successMsg}</p>\n            </Paper>\n    )\n}\n\nexport default Register\n\n","import { useState } from 'react'\nimport Login from '../components/Login'\nimport Register from '../components/Register'\n\nfunction Auth() {\n    const [registerLoginToggle, setRegisterLoginToggle] = useState(true);\n\n    return (\n        <div className=\"main\" style={{display: \"block\"}}>\n            <h1>get it done</h1>\n            {registerLoginToggle ? <Login \n            setRegisterLoginToggle = {setRegisterLoginToggle}\n            /> : \n            <Register \n            setRegisterLoginToggle = {setRegisterLoginToggle}\n            />}\n        </div>\n    )\n}\n\nexport default Auth\n","import { DeleteOutline, EditOutlined } from '@material-ui/icons';\nimport { Box, Card, CardContent, Checkbox, FormControlLabel, Grid, makeStyles } from '@material-ui/core';\nimport { useState } from 'react';\n\nconst useStyles = makeStyles({\n        root: {\n            boxShadow: '0 3px 5px 2px rgba(255, 105, 135, .3)',\n            color: '#330745',\n            padding: \"2%\",\n            margin: \"2% auto\",\n            width: \"500px\"\n        },\n        checkBox: {\n            fill: '#330745'\n        },\n        label: {\n            width: \"500px\"\n        }\n    })\n\nfunction Task({task, deleteTask, updateFormToggle, setMessage, displayMessage}) {\n\n    const classes = useStyles();\n\n    const editTaskStatus = (status) => {\n        task.isFinished = !status;\n        let updatedTask = {...task};\n        const url = \"https://getitdone-backend-app.herokuapp.com/tasks/status\"\n        const options = {\n            method: \"POST\",\n            headers: {\n                'Content-Type': 'application/json',\n                'x-auth-token': localStorage.getItem(\"token\")\n            },\n            body: JSON.stringify(updatedTask)\n        };\n        fetch(url, options)\n        .then(result => result.json()\n        .then(output => {\n            if (output.status == \"success\") {\n                if (updatedTask.isFinished) {\n                    setMessage(output.message)\n                } else {\n                    setMessage(\"Back to the drawing board.\")\n                }\n                displayMessage();\n            } else {\n                console.log(output.message)\n            }\n        }))\n        .catch(err => console.log(err));\n    }\n\n    return (\n        <Grid item>\n            <Card className = {classes.root}>\n                <CardContent>\n                    <FormControlLabel\n                        control={\n                            <Checkbox\n                                className = {classes.checkBox}\n                                onChange={() => editTaskStatus(task.isFinished)}\n                                checked = {task.isFinished ? true : false}\n                                />\n                            }\n                        label={task.title}\n                        labelPlacement=\"left\"\n                        style={task.isFinished ? {textDecoration: \"line-through\", color:\"darkgray\"} : null}\n                        classes={classes.label}\n                        />\n                    <Box>\n                        {!task.isFinished && <EditOutlined  onClick={() => updateFormToggle(\"edit\", task)}>Edit</EditOutlined>}\n                        <DeleteOutline onClick={() => deleteTask(task._id)}>Delete</DeleteOutline>\n                    </Box>\n                </CardContent>\n            </Card>\n        </Grid>\n    )\n}\n\nexport default Task;\n","import { useState, useEffect } from 'react'\nimport { DragDropContext, Droppable, Draggable } from \"react-beautiful-dnd\";\nimport { Grid } from '@material-ui/core';\nimport Task from './Task'\nimport Tasks from '../pages/Tasks';\n\nfunction TaskWrapper({tasks, updateFormToggle, deleteTask, setMessage, displayMessage}) {\n\n    const [taskList, setTaskList] = useState(tasks);\n\n    useEffect(() => {\n        setTaskList(tasks)\n    }, [Tasks])\n\n    function onDragEnd(result) {\n        if (!result.destination) return;\n        const items = Array.from(taskList);\n        const [reorderedItem] = items.splice(result.source.index, 1);\n        items.splice(result.destination.index, 0, reorderedItem);\n        setTaskList(items);\n    }\n\n    let draggableComp = taskList.map((taskItem, index) => {\n                    return (\n                        <Draggable key={taskItem._id} draggableId={taskItem._id} index={index}>\n                            {(provided) => (\n                                <div key={taskItem._id} ref={provided.innerRef} {...provided.draggableProps} {...provided.dragHandleProps}>\n                                    <Task \n                                    task={taskItem} \n                                    deleteTask = {deleteTask}\n                                    updateFormToggle={updateFormToggle}\n                                    setMessage={setMessage}\n                                    displayMessage={displayMessage}\n                                    />\n                                </div>\n                            )}\n                        </Draggable>\n                        );\n                    })\n\n    return (\n        <Grid container justify=\"center\" \n        spacing={1}  \n        style = {{padding: \"3%\"}}>\n            <DragDropContext onDragEnd={onDragEnd}>\n                <Droppable droppableId=\"tasks\">\n                    {(provided) => (\n                    <div {...provided.droppableProps} ref={provided.innerRef}>\n                        {draggableComp}\n                        {provided.placeholder}\n                    </div>\n                    )}\n                </Droppable>\n            </DragDropContext>\n        </Grid>\n    )\n}\n\nexport default TaskWrapper\n","import { Button, Dialog, DialogActions, DialogContent, DialogTitle, TextField, makeStyles } from '@material-ui/core';\n\n// Add task title as editable value instead of placeholder\n\nfunction Form(props) {\n\n    let activeContent;\n\n    if (props.currentTask) {\n        activeContent = {\n        title: \"Edit Task\",\n        text: \"Change of plans?\",\n        label: props.currentTask.title,\n        placeholder: props.currentTask.title,\n        submitBtn: \"Save Changes\",\n        cancelBtn: \"Cancel\"\n        }\n    } else {\n        activeContent = {\n            title: \"Add New Task\",\n            text: \"What's your plan?\",\n            label: \"Enter Task\",\n            placeholder: \"What's your plan?\",\n            submitBtn: \"Add Task\",\n            cancelBtn: \"Cancel\"\n        }\n    }\n\n    // const [activeContent, setActiveContent] = useState(props.formAction == \"edit\" ? edit : add);\n\n    // RECORDING FORM INPUT\n    function fillForm(e) {\n        if (props.formAction == \"add\") {\n            props.setNewTask({title: e.target.value, isFinished: false});\n        } else {\n            props.setNewTask({...props.currentTask, title: e.target.value});\n        }\n    }\n    return (\n        <Dialog \n        open={props.setFormToggle}\n        fullWidth=\"true\">\n            <DialogTitle>{activeContent.title}</DialogTitle>\n            <DialogContent>\n                <TextField \n                    autoFocus = {true}\n                    fullwidth = {true}\n                    id=\"standard-basic\" \n                    label= {activeContent.text}\n                    placeholder= {activeContent.label}\n                    onChange={fillForm} />\n            </DialogContent>\n            <DialogActions>\n                <Button \n                    type=\"submit\" \n                    variant=\"contained\" \n                    color=\"primary\"\n                    onClick={props.formAction == \"add\" ? props.addTask : props.editTaskTitle}\n                    >{activeContent.submitBtn}</Button>\n                <Button \n                    variant=\"outlined\" \n                    color=\"primary\" \n                    onClick={() => props.setFormToggle(false)}\n                    >{activeContent.cancelBtn}</Button>\n            </DialogActions>\n        </Dialog>\n    )\n}\n\nexport default Form;\n","import React from 'react'\nimport { Typography, Fade } from '@material-ui/core'\n\nfunction Message({message, showMessage}) {\n\n    let content = message;\n\n    return (\n        <Fade in={showMessage} className=\"message\">\n            <Typography>\n                {content}\n            </Typography>\n        </Fade>\n    )\n}\n\nexport default Message","import TaskWrapper from '../components/TaskWrapper';\nimport Form from '../components/Form';\nimport Message from '../components/Message';\nimport '../App.css';\nimport { useState, useEffect } from 'react';\nimport { Box, CircularProgress, Grid, Fab, Typography, makeStyles } from '@material-ui/core';\nimport AddIcon from '@material-ui/icons/Add';\nimport '@fontsource/raleway';\nimport { useHistory } from 'react-router-dom';\n\nimport React from 'react'\n\nfunction Tasks() {\n\n    const [formToggle, setFormToggle] = useState(false);\n    const [tasks, setTasks] = useState([]);\n    const [newTask, setNewTask] = useState({});\n    const [currentTask, setCurrentTask] = useState();\n    const [formAction, setFormAction] = useState(null);\n    const [loader, setLoader] = useState(true);\n    const [message, setMessage] = useState(\"\");\n    const [showMessage, setShowMessage] = useState(false);\n\n    let history = useHistory();\n\n    // TOGGLING ADD/EDIT FORM\n    const updateFormToggle = (action, task) => {\n        setFormAction(action);\n        setCurrentTask(task);\n        setFormToggle(prevState => !prevState);\n    }\n\n    // FETCHING TASKS\n    useEffect(() => {\n        const url = \"https://getitdone-backend-app.herokuapp.com/tasks/all\"\n        const options = {\n            headers: {\n                'x-auth-token': localStorage.getItem('token')\n            }\n        }\n\n        fetch(url, options).then(result => result.json()\n        .then(output => {\n            if (output.status == \"success\") {\n                setTasks(output.data);\n                setLoader(false);\n            } else if (output.status == \"failed\") {\n                setLoader(false);\n                history.push('/auth');\n            }\n        }))\n        .catch(err => {\n            console.log(err)\n            setLoader(false)\n            setMessage(\"Sorry, there seems to be something wrong with your request.\");\n        });\n    }, []);\n\n    // ADDING NEW TASK\n    const addTask = () =>  {\n        setFormToggle(false);\n        const url = \"https://getitdone-backend-app.herokuapp.com/tasks/new\"\n        const options = {\n            method: 'POST',\n            headers: {\n            'Content-Type': 'application/json',\n            'x-auth-token': localStorage.getItem(\"token\")\n            },\n            body: JSON.stringify(newTask)\n        };\n    fetch(url, options)\n    .then(result => result.json()\n    .then(output => {\n    if (output.status == \"success\") {\n        setTasks([...tasks,output.data]);\n        setNewTask({});\n        setMessage(output.message);\n        displayMessage();\n    } else {\n        setMessage(output.message);\n        displayMessage();\n    }\n    }\n    )).catch(err => setMessage(err));\n    }\n\n    // EDITING TASK TITLE\n    const editTaskTitle = () => {\n        setFormToggle(false);\n        const url = \"https://getitdone-backend-app.herokuapp.com/tasks/title\"\n        const options = {\n            method: 'POST',\n            headers: {\n            'Content-Type': 'application/json',\n            'x-auth-token': localStorage.getItem(\"token\")\n            },\n            body: JSON.stringify(newTask)\n        };\n    fetch(url, options)\n    .then(result => result.json()\n    .then(output => {\n        if (output.status === \"success\") {\n            let updatedArr = [];\n            updatedArr = [...tasks];\n            const index = tasks.findIndex(task => task._id == output.data._id);\n            updatedArr[index] = output.data;\n            setTasks([...updatedArr]);\n            setMessage(output.message);\n            displayMessage();\n        } else {\n            setMessage(output.message)\n            displayMessage();\n        }\n    }))\n    .catch(err => console.log(err));\n    };\n\n    // DELETING A TASK\n    const deleteTask = (id) => {\n    console.log(id)\n    const url = \"https://getitdone-backend-app.herokuapp.com/tasks/\" + id;\n    const options = {\n        method: \"DELETE\",\n        headers: {\n            'x-auth-token': localStorage.getItem(\"token\")\n        }\n    }\n    fetch(url, options)\n    .then(result => result.json()\n    .then(output => {\n        if (output.status === \"success\") {\n            let newTasks;\n            newTasks = tasks.filter(task => task._id !== output.data);\n            setTasks(newTasks);\n            setMessage(output.message)\n            displayMessage();\n        } else {\n            setMessage(output.message)\n            displayMessage();\n        }\n    })).catch(err => console.log(err))\n    }\n\n    // MESSAGE DISPLAY\n    const displayMessage = () => {\n        setShowMessage(true);\n        setTimeout(() => {\n            setShowMessage(false);\n        }, 3000);\n    };\n\n    return (\n    <>\n        <Box className=\"main\" display=\"flex\">\n            <div className=\"info-wrapper\">\n                <h1>get it done</h1>\n                <h3>What's on for today?</h3>\n                <p className=\"tip\">(💡 Tip: Rearrange your tasks with drag&drop.)</p>\n                <Fab \n                    color=\"primary\" \n                    aria-label=\"add\" \n                    style = {{marginBottom: \"3%\"}} \n                    onClick={() => updateFormToggle(\"add\")}\n                >\n                    <AddIcon />\n                </Fab>\n                <Message \n                    message={message} \n                    showMessage={showMessage}\n                />\n            </div>\n\n            {loader ? <CircularProgress color=\"secondary\" /> : \n            <div className=\"task-wrapper\">\n                <TaskWrapper \n                    className = \"taskWrapper\"\n                    tasks = {tasks}\n                    deleteTask = {deleteTask}\n                    updateFormToggle = {updateFormToggle}\n                    setMessage = {setMessage}\n                    displayMessage = {displayMessage}\n                />\n            </div>}\n        </Box>\n        {formToggle && \n            <Form \n                setFormToggle={setFormToggle}\n                updateFormToggle = {updateFormToggle}\n                formAction={formAction}\n                currentTask = {currentTask}\n                addTask = {addTask}\n                editTaskTitle = {editTaskTitle}\n                newTask = {newTask}\n                tasks = {tasks}\n                setNewTask = {setNewTask}\n                setTasks = {setTasks}\n            />}\n    </>\n    );\n}\n\nexport default Tasks\n","// TODO\n// Fixable\n// Prompt user to delete when checkbox checked (through message? form? idk)\n// Fill form func on form compoenent?\n// Override mui with custom theme (esp for typography)\n// Fix styling (material ui and drag and drop clashes)\n// Add arrow to indicate scrollable div\n// Add POST request for rearranged list\n// Add warning when no user input on addTask\n\nimport Auth from './pages/Auth'\nimport Tasks from './pages/Tasks'\nimport { Switch, Route } from 'react-router-dom'\n\nfunction App() {\n    return (\n      <Switch>\n        <Route path=\"/tasks\">\n          <Tasks />\n        </Route>\n        <Route path=\"/auth\">\n          <Auth />\n        </Route>\n        <Route path=\"/\">\n          <Auth />\n        </Route>\n      </Switch>\n    )\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { BrowserRouter } from 'react-router-dom'\n\nReactDOM.render(\n  <BrowserRouter basename={process.env.PUBLIC_URL}>\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>\n  </BrowserRouter>,\n  document.getElementById('root')\n);\nreportWebVitals();\n"],"sourceRoot":""}