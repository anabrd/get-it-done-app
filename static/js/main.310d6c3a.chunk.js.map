{"version":3,"sources":["components/Login.js","components/Register.js","pages/Auth.js","components/Task.js","empty-box.png","components/TaskWrapper.js","components/Form.js","components/Message.js","pages/Home.js","App.js","reportWebVitals.js","index.js"],"names":["Login","setRegisterLoginToggle","useState","msg","setMsg","showPass","setShowPass","loader","setLoader","history","useHistory","formData","fillForm","e","target","id","value","console","log","Paper","elevation","className","onSubmit","preventDefault","data","email","pass","options","method","headers","body","JSON","stringify","fetch","then","output","json","result","status","message","localStorage","setItem","push","FormControl","TextField","label","aria-describedby","autoFocus","required","onChange","InputLabel","htmlFor","Input","autoComplete","type","endAdornment","InputAdornment","position","IconButton","aria-label","onClick","prevValue","Visibility","VisibilityOff","Button","variant","color","style","textDecoration","display","cursor","CircularProgress","Register","passError","setPassError","setRegistered","loginError","setLoginError","passErrMsg","setPassErrMsg","loginErrMsg","setLoginErrMsg","successMsg","setSuccessMsg","submitHandler","passConf","setTimeout","error","helperText","FormHelperText","Auth","registerLoginToggle","useStyles","makeStyles","root","boxShadow","padding","margin","width","checkBox","fill","Task","task","deleteTask","updateFormToggle","setMessage","displayMessage","classes","Grid","item","Card","CardContent","FormControlLabel","control","Checkbox","isFinished","updatedTask","getItem","catch","err","editTaskStatus","checked","title","labelPlacement","Box","EditOutlined","DeleteOutline","_id","TaskWrapper","tasks","setTasks","draggableComp","map","taskItem","index","draggableId","provided","ref","innerRef","draggableProps","dragHandleProps","container","justify","length","src","emptyBox","onDragEnd","destination","reorderedTasks","Array","from","splice","source","reorderedTask","forEach","orderId","droppableId","droppableProps","placeholder","Form","props","activeContent","currentTask","text","submitBtn","cancelBtn","Dialog","open","setFormToggle","fullWidth","DialogTitle","DialogContent","fullwidth","formAction","setNewTask","DialogActions","addTask","editTaskTitle","Message","showMessage","content","Fade","in","Typography","Tasks","formToggle","newTask","setCurrentTask","setFormAction","setShowMessage","token","action","prevState","useEffect","sort","a","b","Fab","marginBottom","removeItem","url","newTasks","filter","updatedArr","findIndex","App","path","Home","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","basename","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.310d6c3a.chunk.js","sourcesContent":["import { useHistory } from 'react-router-dom'\nimport { useState } from 'react'\nimport { Button, CircularProgress, FormControl, IconButton, Input, InputAdornment, InputLabel, Paper, TextField } from '@material-ui/core'\nimport { Visibility, VisibilityOff } from '@material-ui/icons'\n\nexport default function Login({setRegisterLoginToggle}) {\n\n    const [msg, setMsg] = useState(\"\");\n    const [showPass, setShowPass] = useState(false);\n    const [loader, setLoader] = useState(false)\n\n    let history = useHistory();\n    let formData = {};\n\n    // Toggle password visibility\n    let handleClickShowPassword = () => {\n        setShowPass(prevValue => !prevValue);\n    }\n\n    // Firm form\n    const fillForm = (e) => {\n        formData[e.target.id] = e.target.value;\n        console.log(formData);\n    }\n\n    // Submit form\n    const submitHandler = (e) => {\n        e.preventDefault();\n        setLoader(true);\n        setMsg(\"\");\n        console.log(formData)\n        let data = {\n                email: formData.email,\n                pass: formData.pass\n            }\n        if (!data.pass) {\n            data.pass = \"\"\n        }\n        let url = 'https://getitdone-backend-app.herokuapp.com/auth/login'\n        let options = {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify(data)\n        }\n\n        fetch(url, options).then(output => output.json().then(result => \n            {\n                if (result.status === \"failed\") {\n                    setMsg(result.message)\n                } else {\n                    setMsg(result.message);\n                    localStorage.setItem(\"token\", result.data);\n                    history.push(\"/home\")\n                }\n                setLoader(false);\n            }\n            ));\n    }\n\n\n    return (\n        <Paper elevation={2}  className=\"authForm-wrapper\">\n            <form onSubmit={submitHandler}  className=\"authForm\">\n                <FormControl>\n                    <TextField \n                    id=\"email\"\n                    label=\"Email\"\n                    aria-describedby=\"my-helper-text\" \n                    autoFocus = {true}\n                    required ={true}\n                    onChange = {fillForm}/>\n                </FormControl>\n                <FormControl>\n                    <InputLabel \n                    htmlFor=\"pass\" \n                    required = {true}>\n                        Password\n                    </InputLabel>\n                    <Input\n                    id = \"pass\" \n                    label = \"Password\"\n                    onChange = {fillForm}\n                    value = {formData.pass}\n                    autoComplete=\"current-password\"\n                    type={showPass ? 'text' : 'password'}\n                    endAdornment={\n                        <InputAdornment position=\"end\">\n                            <IconButton\n                            aria-label=\"toggle password visibility\"\n                            onClick={handleClickShowPassword}\n                            >\n                            {showPass ?  <Visibility /> :\n                            <VisibilityOff />}\n                            </IconButton>\n                        </InputAdornment>\n                    }/>\n                </FormControl>\n                <Button \n                    type=\"submit\" \n                    variant=\"contained\" \n                    color=\"secondary\"\n                    >Login</Button>\n            </form>\n            <p>New here?\n                    <span\n                    style = {{textDecoration: \"underline\", display: \"block\", cursor: \"pointer\"}}\n                    onClick={() => setRegisterLoginToggle(false)}\n                    >Register</span>\n            </p>\n            <p>{msg}</p>\n            {loader && <CircularProgress color=\"secondary\" />}\n        </Paper>\n    )\n}\n","import { useState } from 'react'\nimport { Button, CircularProgress, FormControl, FormHelperText, IconButton, Input, InputAdornment, InputLabel, Paper, TextField } from '@material-ui/core'\nimport { Visibility, VisibilityOff } from '@material-ui/icons'\n\nfunction Register({setRegisterLoginToggle}) {\n\n    const [passError, setPassError] = useState(false);\n    const [registered, setRegistered] = useState(false);\n    const [loginError, setLoginError] = useState(false);\n    const [passErrMsg, setPassErrMsg] = useState(\"\");\n    const [loginErrMsg, setLoginErrMsg] = useState(\"\");\n    const [successMsg, setSuccessMsg] = useState(\"\");\n    const [showPass, setShowPass] = useState(false);\n    const [loader, setLoader] = useState(false)\n\n    let formData = {};\n\n    let handleClickShowPassword = () => {\n        setShowPass(prevValue => !prevValue);\n    }\n\n    const fillForm = (e) => {\n        formData[e.target.id] = e.target.value;\n        setPassError(false);\n        setLoginError(false);\n        setPassErrMsg(\"\");\n        console.log(formData);\n    }\n\n    const submitHandler = (e) => {\n        e.preventDefault();\n        setPassErrMsg(\"\");\n        setLoginErrMsg(\"\");\n        setSuccessMsg(\"\")\n        setLoader(true);\n        let data = {\n                email: formData.email,\n                pass: formData.pass\n            }\n        if (!data.pass) {\n            setPassError(true);\n            setPassErrMsg(\"Please enter a password.\");\n        } else if (data.pass !== formData.passConf) {\n            setPassError(true);\n            setPassErrMsg(\"Please make sure the passwords match.\");\n        } else {\n            let url = 'https://getitdone-backend-app.herokuapp.com/auth/register'\n            let options = {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify(data)\n            }\n            console.log(options)\n\n            fetch(url, options).then(output => output.json().then(result => \n                {\n                    if (result.status == \"failed\") {\n                        setLoginErrMsg(result.message);\n                        setLoginError(true);\n                        setLoader(false)\n                    } else {\n                        setRegistered(true);\n                        setSuccessMsg(\"Welcome aboard! Redirecting to login...\");\n                        setTimeout(() => {\n                            setRegisterLoginToggle(true);\n                            setLoader(false)\n                        }, 2000);\n                    }\n                }));\n        }\n    }\n\n    return (\n        <Paper elevation={2}  className=\"authForm-wrapper\">\n                <form onSubmit={submitHandler}  className=\"authForm\">\n                    <FormControl>\n                        <TextField \n                        id=\"email\"\n                        label=\"Email\"\n                        aria-describedby=\"my-helper-text\" \n                        autoFocus=\"true\"\n                        required=\"true\"\n                        error={loginError}\n                        helperText={loginErrMsg}\n                        onChange={fillForm}/>\n                    </FormControl>\n                    <FormControl>\n                        <InputLabel \n                        htmlFor=\"pass\" \n                        required={true}>\n                            Password\n                        </InputLabel>\n                        <Input\n                        id=\"pass\" \n                        label=\"Password\"\n                        onChange = {fillForm}\n                        value = {formData.pass}\n                        type={showPass ? 'text' : 'password'}\n                        endAdornment={\n                            <InputAdornment position=\"end\">\n                                <IconButton\n                                aria-label=\"toggle password visibility\"\n                                onClick={handleClickShowPassword}\n                                >\n                                {showPass ?  <Visibility /> :\n                                <VisibilityOff />}\n                                </IconButton>\n                            </InputAdornment>\n                        }/>\n                    </FormControl>\n                    <FormControl>\n                        <InputLabel \n                        htmlFor=\"passConf\" \n                        required = {true}>\n                            Confirm Password\n                        </InputLabel>\n                        <Input\n                        id=\"passConf\" \n                        label=\"Confirm Password\"\n                        error={passError}\n                        helperText={passErrMsg}\n                        onChange = {fillForm}\n                        value = {formData.passConf}\n                        type={showPass ? 'text' : 'password'}\n                        />\n                        <FormHelperText id=\"passConfErr\">{passErrMsg}</FormHelperText>\n                    </FormControl>\n                    <Button \n                        type=\"submit\" \n                        variant=\"contained\" \n                        color=\"secondary\"\n                        onClick={() => submitHandler}\n                        >Register</Button>\n                </form>\n                <p>Have an account?\n                        <span\n                        style = {{textDecoration: \"underline\", display: \"block\", cursor: \"pointer\"}}\n                        onClick={() => setRegisterLoginToggle(true)}\n                        >Log In</span>\n                </p>\n                <p>{successMsg}</p>\n                {loader && <CircularProgress color=\"secondary\" />}\n            </Paper>\n    )\n}\n\nexport default Register\n\n","import { FormatColorReset } from '@material-ui/icons';\nimport { useState } from 'react'\nimport Login from '../components/Login'\nimport Register from '../components/Register'\n\nfunction Auth() {\n    const [registerLoginToggle, setRegisterLoginToggle] = useState(true);\n\n    return (\n        <div className=\"main\" style={{display: \"block\"}}>\n            <h1>get it done</h1>\n            {registerLoginToggle ? <Login \n            setRegisterLoginToggle = {setRegisterLoginToggle}\n            /> : \n            <Register \n            setRegisterLoginToggle = {setRegisterLoginToggle}\n            />}\n        </div>\n    )\n}\n\nexport default Auth\n","import { DeleteOutline, EditOutlined } from '@material-ui/icons';\nimport { Box, Card, CardContent, Checkbox, FormControlLabel, Grid, makeStyles } from '@material-ui/core';\nimport { useState } from 'react';\n\nconst useStyles = makeStyles({\n        root: {\n            boxShadow: '0 3px 5px 2px rgba(255, 105, 135, .3)',\n            color: '#330745',\n            padding: \"2%\",\n            margin: \"2% auto\",\n            width: \"500px\"\n        },\n        checkBox: {\n            fill: '#330745'\n        },\n        label: {\n            width: \"500px\"\n        }\n    })\n\nfunction Task({task, deleteTask, updateFormToggle, setMessage, displayMessage}) {\n\n    const classes = useStyles();\n\n    const editTaskStatus = (status) => {\n        task.isFinished = !status;\n        let updatedTask = {...task};\n        const url = \"https://getitdone-backend-app.herokuapp.com/tasks/status\"\n        const options = {\n            method: \"POST\",\n            headers: {\n                'Content-Type': 'application/json',\n                'x-auth-token': localStorage.getItem(\"token\")\n            },\n            body: JSON.stringify(updatedTask)\n        };\n        fetch(url, options)\n        .then(result => result.json()\n        .then(output => {\n            if (output.status == \"success\") {\n                if (updatedTask.isFinished) {\n                    setMessage(output.message)\n                } else {\n                    setMessage(\"Back to the drawing board.\")\n                }\n                displayMessage();\n            } else {\n                console.log(output.message)\n            }\n        }))\n        .catch(err => console.log(err));\n    }\n\n    return (\n        <Grid item>\n            <Card className = {classes.root}>\n                <CardContent>\n                    <FormControlLabel\n                        control={\n                            <Checkbox\n                                className = {classes.checkBox}\n                                onChange={() => editTaskStatus(task.isFinished)}\n                                checked = {task.isFinished ? true : false}\n                                />\n                            }\n                        label={task.title}\n                        labelPlacement=\"left\"\n                        style={task.isFinished ? {textDecoration: \"line-through\", color:\"darkgray\"} : null}\n                        classes={classes.label}\n                        />\n                    <Box>\n                        {!task.isFinished && <EditOutlined  onClick={() => updateFormToggle(\"edit\", task)}>Edit</EditOutlined>}\n                        <DeleteOutline onClick={() => deleteTask(task._id)}>Delete</DeleteOutline>\n                    </Box>\n                </CardContent>\n            </Card>\n        </Grid>\n    )\n}\n\nexport default Task;\n","export default __webpack_public_path__ + \"static/media/empty-box.a72ddfc2.png\";","import { DragDropContext, Droppable, Draggable } from \"react-beautiful-dnd\";\nimport { Box } from '@material-ui/core';\nimport Task from './Task';\nimport emptyBox from '../empty-box.png'\n\nfunction TaskWrapper({tasks, setTasks, updateFormToggle, deleteTask, setMessage, displayMessage}) {\n\n    function onDragEnd(result) {\n        if (!result.destination) return;\n        const reorderedTasks = Array.from(tasks);\n        const [reorderedTask] = reorderedTasks.splice(result.source.index, 1);\n        reorderedTasks.splice(result.destination.index, 0, reorderedTask);\n        console.log('reorderedtasks before foreach', reorderedTasks);\n\n        reorderedTasks.forEach((task, index) => task.orderId = index);\n\n        console.log('reorderedtasks after foreach', reorderedTasks);\n        setTasks(reorderedTasks);\n\n        // Send new order to backend\n        const url = \"https://getitdone-backend-app.herokuapp.com/tasks/order\"\n        const options = {\n            method: \"POST\",\n            headers: {\n                'Content-Type': 'application/json',\n                'x-auth-token': localStorage.getItem(\"token\")\n            },\n            body: JSON.stringify(reorderedTasks)\n        };\n        fetch(url, options)\n        .then(result => result.json()\n        .then(output => {\n            if (output.status == \"success\") {\n                console.log(\"OK\")\n            } else {\n                console.log(\"Not OK\")\n            }\n        }))\n        .catch(err => console.log(err));\n    }\n\n    let draggableComp = tasks.map((taskItem, index) => {\n                    return (\n                        <Draggable key={taskItem._id} draggableId={taskItem._id} index={index}>\n                            {(provided) => (\n                                <div key={taskItem._id} ref={provided.innerRef} {...provided.draggableProps} {...provided.dragHandleProps}>\n                                    <Task \n                                    task={taskItem} \n                                    deleteTask = {deleteTask}\n                                    updateFormToggle={updateFormToggle}\n                                    setMessage={setMessage}\n                                    displayMessage={displayMessage}\n                                    />\n                                </div>\n                            )}\n                        </Draggable>\n                        );\n                    })\n\n    return (\n        <Box \n            container \n            justify=\"center\"\n            style = {{padding: \"3%\"}}\n        >\n            {tasks.length === 0 ? \n            <div className=\"empty-box-wrapper\">\n                <img className=\"empty-box\" src={emptyBox} /> \n                <p>Nothing here yet!</p>\n            </div>\n            :\n            <DragDropContext onDragEnd={onDragEnd}>\n                <Droppable droppableId=\"tasks\">\n                    {(provided) => (\n                    <div {...provided.droppableProps} ref={provided.innerRef}>\n                        {draggableComp}\n                        {provided.placeholder}\n                    </div>\n                    )}\n                </Droppable>\n            </DragDropContext>}\n            \n        </Box>\n    )\n}\n\nexport default TaskWrapper\n","import { Button, Dialog, DialogActions, DialogContent, DialogTitle, TextField, makeStyles } from '@material-ui/core';\n\n// Add task title as editable value instead of placeholder\n\nfunction Form(props) {\n\n    let activeContent;\n\n    if (props.currentTask) {\n        activeContent = {\n        title: \"Edit Task\",\n        text: \"Change of plans?\",\n        label: props.currentTask.title,\n        placeholder: props.currentTask.title,\n        submitBtn: \"Save Changes\",\n        cancelBtn: \"Cancel\"\n        }\n    } else {\n        activeContent = {\n            title: \"Add New Task\",\n            text: \"What's your plan?\",\n            label: \"Enter Task\",\n            placeholder: \"What's your plan?\",\n            submitBtn: \"Add Task\",\n            cancelBtn: \"Cancel\"\n        }\n    }\n\n    // const [activeContent, setActiveContent] = useState(props.formAction == \"edit\" ? edit : add);\n\n    // RECORDING FORM INPUT\n    function fillForm(e) {\n        if (props.formAction == \"add\") {\n            props.setNewTask({title: e.target.value, isFinished: false});\n        } else {\n            props.setNewTask({...props.currentTask, title: e.target.value});\n        }\n    }\n    return (\n        <Dialog \n        open={props.setFormToggle}\n        fullWidth=\"true\">\n            <DialogTitle>{activeContent.title}</DialogTitle>\n            <DialogContent>\n                <TextField \n                    autoFocus = {true}\n                    fullwidth = {true}\n                    id=\"standard-basic\" \n                    label= {activeContent.text}\n                    placeholder= {activeContent.label}\n                    onChange={fillForm} />\n            </DialogContent>\n            <DialogActions>\n                <Button \n                    type=\"submit\" \n                    variant=\"contained\" \n                    color=\"primary\"\n                    onClick={props.formAction == \"add\" ? props.addTask : props.editTaskTitle}\n                    >{activeContent.submitBtn}</Button>\n                <Button \n                    variant=\"outlined\" \n                    color=\"primary\" \n                    onClick={() => props.setFormToggle(false)}\n                    >{activeContent.cancelBtn}</Button>\n            </DialogActions>\n        </Dialog>\n    )\n}\n\nexport default Form;\n","import React from 'react'\nimport { Typography, Fade } from '@material-ui/core'\n\nfunction Message({message, showMessage}) {\n\n    let content = message;\n\n    return (\n        <Fade in={showMessage} className=\"message\">\n            <Typography>\n                {content}\n            </Typography>\n        </Fade>\n    )\n}\n\nexport default Message","import TaskWrapper from '../components/TaskWrapper';\nimport Form from '../components/Form';\nimport Message from '../components/Message';\nimport '../App.css';\nimport { useState, useEffect } from 'react';\nimport { Box, CircularProgress, Fab} from '@material-ui/core';\nimport AddIcon from '@material-ui/icons/Add';\nimport '@fontsource/raleway';\nimport { useHistory } from 'react-router-dom';\n\nimport React from 'react'\n\nfunction Tasks() {\n\n    const [formToggle, setFormToggle] = useState(false);\n    const [tasks, setTasks] = useState([]);\n    const [newTask, setNewTask] = useState({});\n    const [currentTask, setCurrentTask] = useState();\n    const [formAction, setFormAction] = useState(null);\n    const [loader, setLoader] = useState(true);\n    const [message, setMessage] = useState(\"\");\n    const [showMessage, setShowMessage] = useState(false);\n    const [token, setToken] = useState(localStorage.getItem('token'));\n\n    let history = useHistory();\n\n    // TOGGLING ADD/EDIT FORM\n    const updateFormToggle = (action, task) => {\n        setFormAction(action);\n        setCurrentTask(task);\n        setFormToggle(prevState => !prevState);\n    }\n\n    // MESSAGE DISPLAY\n    const displayMessage = () => {\n        setShowMessage(true);\n        setTimeout(() => {\n            setShowMessage(false);\n        }, 3000);\n    };\n\n    // FETCHING TASKS\n    useEffect(() => {\n        const url = \"https://getitdone-backend-app.herokuapp.com/tasks/all\"\n        const options = {\n            headers: {\n                'x-auth-token': token\n            }\n        }\n\n        fetch(url, options).then(result => result.json()\n        .then(output => {\n            if (output.status == \"success\") {\n                // Rearrange fetched tasks according to their orderID\n                output.data.sort((a,b) => (a.orderId > b.orderId) ? 1 : ((b.orderId > a.orderId) ? -1 : 0))\n                setTasks(output.data);\n                setLoader(false);\n            } else if (output.status == \"failed\") {\n                setLoader(false);\n                history.push('/auth');\n            }\n        }))\n        .catch(err => {\n            console.log(err)\n            setLoader(false)\n            setMessage(\"Sorry, there seems to be something wrong with your request.\");\n        });\n    }, []);\n\n    // ADDING NEW TASK\n    const addTask = () =>  {\n        setFormToggle(false);\n        const url = \"https://getitdone-backend-app.herokuapp.com/tasks/new\"\n        const options = {\n            method: 'POST',\n            headers: {\n            'Content-Type': 'application/json',\n            'x-auth-token': localStorage.getItem(\"token\")\n            },\n            body: JSON.stringify(newTask)\n        };\n    fetch(url, options)\n    .then(result => result.json()\n        .then(output => {\n            if (output.status == \"success\") {\n                setTasks([...tasks,output.data]);\n                setNewTask({});\n                setMessage(output.message);\n                displayMessage();\n            } else {\n                setMessage(output.message);\n                displayMessage();\n            }\n        }\n    )).catch(err => setMessage(err));\n    }\n\n    // EDITING TASK TITLE\n    const editTaskTitle = () => {\n        setFormToggle(false);\n        const url = \"https://getitdone-backend-app.herokuapp.com/tasks/title\"\n        const options = {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n                'x-auth-token': localStorage.getItem(\"token\")\n            },\n            body: JSON.stringify(newTask)\n        };\n    fetch(url, options)\n    .then(result => result.json()\n        .then(output => {\n            if (output.status === \"success\") {\n                let updatedArr = [];\n                updatedArr = [...tasks];\n                const index = tasks.findIndex(task => task._id == output.data._id);\n                updatedArr[index] = output.data;\n                setTasks([...updatedArr]);\n                setMessage(output.message);\n                displayMessage();\n            } else {\n                setMessage(output.message)\n                displayMessage();\n            }\n    }))\n    .catch(err => console.log(err));\n    };\n\n    // DELETING A TASK\n    const deleteTask = (id) => {\n    const url = \"https://getitdone-backend-app.herokuapp.com/tasks/\" + id;\n    const options = {\n        method: \"DELETE\",\n        headers: {\n            'x-auth-token': localStorage.getItem(\"token\")\n        }\n    }\n    fetch(url, options)\n    .then(result => result.json()\n    .then(output => {\n        if (output.status === \"success\") {\n            let newTasks;\n            newTasks = tasks.filter(task => task._id !== output.data);\n            setTasks(newTasks);\n            setMessage(output.message)\n            displayMessage();\n        } else {\n            setMessage(output.message)\n            displayMessage();\n        }\n    })).catch(err => console.log(err))\n    }\n\n    // LOGOUT\n\n    const logout = () => {\n        console.log(\"logout works\")\n        localStorage.removeItem(\"token\");\n        history.push(\"/\")\n    }\n\n    return (\n    <>\n        <Box className=\"main\" display=\"flex\">\n            <div className=\"info-wrapper\">\n                <h1>get it done</h1>\n                <h3>What's on for today?</h3>\n                <p className=\"tip\">(💡 Tip: Rearrange your tasks with drag&drop.)</p>\n                <Fab \n                    color=\"primary\" \n                    aria-label=\"add\" \n                    style = {{marginBottom: \"3%\"}} \n                    onClick={() => updateFormToggle(\"add\")}\n                >\n                    <AddIcon />\n                </Fab>\n                <Message \n                    message={message} \n                    showMessage={showMessage}\n                />\n                <p className=\"logout\" onClick={logout}>Logout</p>\n            </div>\n            <div className=\"task-wrapper\">\n                {loader ?\n                <CircularProgress color=\"secondary\" /> : \n                <TaskWrapper \n                    className = \"taskWrapper\"\n                    tasks = {tasks}\n                    setTasks = {setTasks}\n                    deleteTask = {deleteTask}\n                    updateFormToggle = {updateFormToggle}\n                    setMessage = {setMessage}\n                    displayMessage = {displayMessage}\n                />}\n            </div>\n        </Box>\n        {formToggle && \n            <Form \n                setFormToggle={setFormToggle}\n                updateFormToggle = {updateFormToggle}\n                formAction={formAction}\n                currentTask = {currentTask}\n                addTask = {addTask}\n                editTaskTitle = {editTaskTitle}\n                newTask = {newTask}\n                tasks = {tasks}\n                setNewTask = {setNewTask}\n                setTasks = {setTasks}\n            />}\n    </>\n    );\n}\n\nexport default Tasks\n","// TODO\n// Fixable\n// Prompt user to delete when checkbox checked (through message? form? idk)\n// Fill form func on form compoenent?\n// Override mui with custom theme (esp for typography)\n// Fix styling (material ui and drag and drop clashes)\n// Add arrow to indicate scrollable div\n// Add POST request for rearranged list\n// Add warning when no user input on addTask\n\nimport Auth from './pages/Auth'\nimport Home from './pages/Home'\nimport { Switch, Route } from 'react-router-dom'\n\n\nfunction App() {\n    return (\n      <Switch>\n        <Route path=\"/home\">\n          <Home />\n        </Route>\n        <Route path=\"/auth\">\n          <Auth />\n        </Route>\n        <Route path=\"/\">\n          <Auth />\n        </Route>\n      </Switch>\n    )\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { BrowserRouter } from 'react-router-dom'\n\nReactDOM.render(\n  <BrowserRouter basename=\"/get-it-done-app/\">\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>\n  </BrowserRouter>,\n  document.getElementById('root')\n);\nreportWebVitals();\n"],"sourceRoot":""}